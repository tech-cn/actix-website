"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[2524],{2524:(e,n,r)=>{r.r(n),r.d(n,{default:()=>t});const t='// <logging>\nuse actix_web::{error, get, middleware::Logger, App, HttpServer, Result};\nuse derive_more::{Display, Error};\nuse log::info;\n\n#[derive(Debug, Display, Error)]\n#[display(fmt = "my error: {}", name)]\npub struct MyError {\n    name: &\'static str,\n}\n\n// Use default implementation for `error_response()` method\nimpl error::ResponseError for MyError {}\n\n#[get("/")]\nasync fn index() -> Result<&\'static str, MyError> {\n    let err = MyError { name: "test error" };\n    info!("{}", err);\n    Err(err)\n}\n\n#[rustfmt::skip]\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    std::env::set_var("RUST_LOG", "info");\n    std::env::set_var("RUST_BACKTRACE", "1");\n    env_logger::init();\n\n    HttpServer::new(|| {\n        let logger = Logger::default();\n\n        App::new()\n            .wrap(logger)\n            .service(index)\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n// </logging>\n'}}]);