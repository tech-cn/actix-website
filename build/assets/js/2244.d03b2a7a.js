"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[2244],{2244:(r,e,n)=>{n.r(e),n.d(e,{default:()=>t});const t='// <recommend-two>\nuse actix_web::{\n    error, get,\n    http::{header::ContentType, StatusCode},\n    App, HttpResponse, HttpServer,\n};\nuse derive_more::{Display, Error};\n\n#[derive(Debug, Display, Error)]\nenum UserError {\n    #[display(fmt = "An internal error occurred. Please try again later.")]\n    InternalError,\n}\n\nimpl error::ResponseError for UserError {\n    fn error_response(&self) -> HttpResponse {\n        HttpResponse::build(self.status_code())\n            .insert_header(ContentType::html())\n            .body(self.to_string())\n    }\n\n    fn status_code(&self) -> StatusCode {\n        match *self {\n            UserError::InternalError => StatusCode::INTERNAL_SERVER_ERROR,\n        }\n    }\n}\n\n#[get("/")]\nasync fn index() -> Result<&\'static str, UserError> {\n    do_thing_that_fails().map_err(|_e| UserError::InternalError)?;\n    Ok("success!")\n}\n// </recommend-two>\n\nfn do_thing_that_fails() -> Result<(), std::io::Error> {\n    Err(std::io::Error::new(std::io::ErrorKind::Other, "some error"))\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| App::new().service(index))\n        .bind(("127.0.0.1", 8080))?\n        .run()\n        .await\n}\n'}}]);