"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[3108],{3108:(n,e,t)=>{t.r(e),t.d(e,{default:()=>o});const o='use actix_web::{web, App, FromRequest, HttpRequest, HttpServer, Responder};\nuse serde::Deserialize;\n\n// pub mod custom_handler;\npub mod form;\npub mod json_one;\npub mod json_two;\npub mod multiple;\npub mod path_one;\npub mod path_three;\npub mod path_two;\npub mod query;\n\n#[derive(Deserialize, Debug)]\nstruct MyInfo {\n    username: String,\n    id: u32,\n}\n\n// <option-one>\nasync fn index(path: web::Path<(String, String)>, json: web::Json<MyInfo>) -> impl Responder {\n    let path = path.into_inner();\n    format!("{} {} {} {}", path.0, path.1, json.id, json.username)\n}\n// </option-one>\n\n// <option-two>\nasync fn extract(req: HttpRequest) -> impl Responder {\n    let params = web::Path::<(String, String)>::extract(&req)\n        .await\n        .unwrap()\n        .into_inner();\n\n    let info = web::Json::<MyInfo>::extract(&req)\n        .await\n        .expect("Err with reading json.");\n\n    format!("{} {} {} {}", params.0, params.1, info.username, info.id)\n}\n// </option-two>\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route("/{name}/{id}", web::post().to(index))\n            .route("/{name}/{id}/extract", web::post().to(extract))\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n'}}]);