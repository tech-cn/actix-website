"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[4547],{4547:(r,n,e)=>{e.r(n),e.d(n,{default:()=>t});const t='// <override>\nuse actix_web::{\n    error, get,\n    http::{header::ContentType, StatusCode},\n    App, HttpResponse,\n};\nuse derive_more::{Display, Error};\n\n#[derive(Debug, Display, Error)]\nenum MyError {\n    #[display(fmt = "internal error")]\n    InternalError,\n\n    #[display(fmt = "bad request")]\n    BadClientData,\n\n    #[display(fmt = "timeout")]\n    Timeout,\n}\n\nimpl error::ResponseError for MyError {\n    fn error_response(&self) -> HttpResponse {\n        HttpResponse::build(self.status_code())\n            .insert_header(ContentType::html())\n            .body(self.to_string())\n    }\n\n    fn status_code(&self) -> StatusCode {\n        match *self {\n            MyError::InternalError => StatusCode::INTERNAL_SERVER_ERROR,\n            MyError::BadClientData => StatusCode::BAD_REQUEST,\n            MyError::Timeout => StatusCode::GATEWAY_TIMEOUT,\n        }\n    }\n}\n\n#[get("/")]\nasync fn index() -> Result<&\'static str, MyError> {\n    Err(MyError::BadClientData)\n}\n// </override>\n\n#[get("/e2")]\nasync fn error2() -> Result<&\'static str, MyError> {\n    Err(MyError::InternalError)\n}\n\n#[get("/e3")]\nasync fn error3() -> Result<&\'static str, MyError> {\n    Err(MyError::Timeout)\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    use actix_web::HttpServer;\n\n    HttpServer::new(|| App::new().service(index).service(error2).service(error3))\n        .bind(("127.0.0.1", 8080))?\n        .run()\n        .await\n}\n'}}]);