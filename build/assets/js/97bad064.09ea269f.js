(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[5886],{2412:(e,r,t)=>{var s={"./application/src/app.rs":[7995,7995],"./application/src/combine.rs":[7882,7882],"./application/src/config.rs":[8254,8254],"./application/src/main.rs":[6542,6542],"./application/src/mutable_state.rs":[8235,8235],"./application/src/scope.rs":[4395,4395],"./application/src/state.rs":[5971,5971],"./application/src/vh.rs":[4346,4346],"./async-handlers/src/main.rs":[6220,6220],"./async-handlers/src/stream.rs":[7944,7944],"./databases/src/main.rs":[7644,7644],"./easy-form-handling/src/main.rs":[8230,8230],"./either/src/main.rs":[9677,9677],"./errors/src/helpers.rs":[5786,5786],"./errors/src/logging.rs":[2524,2524],"./errors/src/main.rs":[2245,2245],"./errors/src/override_error.rs":[4547,4547],"./errors/src/recommend_one.rs":[7942,7942],"./errors/src/recommend_two.rs":[2244,2244],"./extractors/src/form.rs":[6733,6733],"./extractors/src/json_one.rs":[1533,1533],"./extractors/src/json_two.rs":[1522,1522],"./extractors/src/main.rs":[3108,3108],"./extractors/src/multiple.rs":[2591,2591],"./extractors/src/path_one.rs":[1341,1341],"./extractors/src/path_three.rs":[857,857],"./extractors/src/path_two.rs":[2544,2544],"./extractors/src/query.rs":[2790,2790],"./flexible-responders/src/main.rs":[7319,7319],"./getting-started/src/main.rs":[7370,7370],"./http2/src/main.rs":[4988,4988],"./main-example/src/main.rs":[1324,1324],"./middleware/src/default_headers.rs":[5693,5693],"./middleware/src/errorhandler.rs":[2856,2856],"./middleware/src/logger.rs":[340,340],"./middleware/src/main.rs":[2871,2871],"./middleware/src/user_sessions.rs":[1366,1366],"./middleware/src/wrap_fn.rs":[4398,4398],"./powerful-extractors/src/main.rs":[2509,2509],"./request-handlers/src/handlers_arc.rs":[2517,2517],"./request-handlers/src/main.rs":[3802,3802],"./request-routing/src/main.rs":[6461,6461],"./requests/src/main.rs":[6080,6080],"./requests/src/manual.rs":[9517,9517],"./requests/src/multipart.rs":[9327,9327],"./requests/src/streaming.rs":[7219,7219],"./requests/src/urlencoded.rs":[6982,6982],"./responder-trait/src/main.rs":[3514,3514],"./responses/src/auto.rs":[4147,4147],"./responses/src/chunked.rs":[2809,2809],"./responses/src/identity.rs":[3854,3854],"./responses/src/identity_two.rs":[870,870],"./responses/src/json_resp.rs":[1819,1819],"./responses/src/main.rs":[4938,4938],"./server/src/keep_alive.rs":[592,592],"./server/src/keep_alive_tp.rs":[8983,8983],"./server/src/main.rs":[8128,8128],"./server/src/signals.rs":[7132,7132],"./server/src/ssl.rs":[151,151],"./server/src/workers.rs":[4012,4012],"./static-files/src/configuration.rs":[4031,4031],"./static-files/src/configuration_two.rs":[8861,8861],"./static-files/src/directory.rs":[4333,4333],"./static-files/src/main.rs":[7135,7135],"./testing/src/integration_one.rs":[179,6841],"./testing/src/integration_two.rs":[6720,6720],"./testing/src/main.rs":[4198,4198],"./testing/src/stream_response.rs":[926,926],"./url-dispatch/src/cfg.rs":[3146,3146],"./url-dispatch/src/dhandler.rs":[6692,6692],"./url-dispatch/src/guard.rs":[5052,5052],"./url-dispatch/src/guard2.rs":[8207,8207],"./url-dispatch/src/main.rs":[710,710],"./url-dispatch/src/minfo.rs":[813,813],"./url-dispatch/src/norm.rs":[966,966],"./url-dispatch/src/norm2.rs":[5315,5315],"./url-dispatch/src/path.rs":[3403,3403],"./url-dispatch/src/path2.rs":[9765,9765],"./url-dispatch/src/pbuf.rs":[3173,3173],"./url-dispatch/src/resource.rs":[960,960],"./url-dispatch/src/scope.rs":[8536,8536],"./url-dispatch/src/url_ext.rs":[2312,2312],"./url-dispatch/src/urls.rs":[4808,4808],"./websockets/src/main.rs":[1256,1256]};function n(e){if(!t.o(s,e))return Promise.resolve().then((()=>{var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}));var r=s[e],n=r[0];return t.e(r[1]).then((()=>t(n)))}n.keys=()=>Object.keys(s),n.id=2412,e.exports=n},3905:(e,r,t)=>{"use strict";t.d(r,{Zo:()=>p,kt:()=>m});var s=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);r&&(s=s.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,s,n=function(e,r){if(null==e)return{};var t,s,n={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=s.createContext({}),c=function(e){var r=s.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return s.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return s.createElement(s.Fragment,{},r)}},u=s.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=n,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?s.createElement(h,o(o({ref:r},p),{},{components:t})):s.createElement(h,o({ref:r},p))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,o=new Array(a);o[0]=u;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2536:(e,r,t)=>{"use strict";t.d(r,{Z:()=>a});var s=t(7294),n=t(814);const a=e=>{let{example:r,file:a,section:o}=e;const[i,l]=(0,s.useState)("");return(0,s.useEffect)((()=>{let e=!0;return t(2412)(`./${r}/src/${a||"main.rs"}`).then((r=>{r=r.default.match(new RegExp(`// <${o}>\n([\\s\\S]*)// </${o}>`))[1],e&&l(r)})).catch((e=>console.log(e))),()=>{e=!1}}),[]),s.createElement(n.Z,{className:"language-rust"},i)}},1262:(e,r,t)=>{"use strict";t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var s=t(7462),n=(t(7294),t(3905)),a=t(2536);const o={title:"Requests"},i="JSON Request",l={unversionedId:"request",id:"request",title:"Requests",description:"There are several options for json body deserialization.",source:"@site/docs/request.md",sourceDirName:".",slug:"/request",permalink:"/docs/request",draft:!1,editUrl:"https://github.com/actix/actix-website/edit/master/docs/request.md",tags:[],version:"current",frontMatter:{title:"Requests"},sidebar:"docs",previous:{title:"URL Dispatch",permalink:"/docs/url-dispatch"},next:{title:"Responses",permalink:"/docs/response"}},c={},p=[{value:"Content Encoding",id:"content-encoding",level:2},{value:"Chunked transfer encoding",id:"chunked-transfer-encoding",level:2},{value:"Multipart body",id:"multipart-body",level:2},{value:"Urlencoded body",id:"urlencoded-body",level:2},{value:"Streaming request",id:"streaming-request",level:2}],d={toc:p};function u(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"json-request"},"JSON Request"),(0,n.kt)("p",null,"There are several options for json body deserialization."),(0,n.kt)("p",null,"The first option is to use ",(0,n.kt)("em",{parentName:"p"},"Json")," extractor. First, you define a handler function that accepts ",(0,n.kt)("inlineCode",{parentName:"p"},"Json<T>")," as a parameter, then, you use the ",(0,n.kt)("inlineCode",{parentName:"p"},".to()")," method for registering this handler. It is also possible to accept arbitrary valid json object by using ",(0,n.kt)("inlineCode",{parentName:"p"},"serde_json::Value")," as a type ",(0,n.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,n.kt)("p",null,"First example of json of ",(0,n.kt)("inlineCode",{parentName:"p"},"JSON Request")," depends on ",(0,n.kt)("inlineCode",{parentName:"p"},"serde"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nserde = { version = "1.0", features = ["derive"] }\n')),(0,n.kt)("p",null,"Second example of ",(0,n.kt)("inlineCode",{parentName:"p"},"JSON Request")," depends on ",(0,n.kt)("inlineCode",{parentName:"p"},"serde")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"serde_json")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"futures"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nserde = { version = "1.0", features = ["derive"] }\nserde_json = "1"\nfutures = "0.3"\n')),(0,n.kt)("p",null,"If you want to add default value for a field, refer to ",(0,n.kt)("inlineCode",{parentName:"p"},"serde"),"'s ",(0,n.kt)("a",{parentName:"p",href:"https://serde.rs/attr-default.html"},"documentation"),"."),(0,n.kt)(a.Z,{example:"requests",file:"main.rs",section:"json-request",mdxType:"CodeBlock"}),(0,n.kt)("p",null,"You may also manually load the payload into memory and then deserialize it."),(0,n.kt)("p",null,"In the following example, we will deserialize a ",(0,n.kt)("em",{parentName:"p"},"MyObj")," struct. We need to load the request body first and then deserialize the json into an object."),(0,n.kt)(a.Z,{example:"requests",file:"manual.rs",section:"json-manual",mdxType:"CodeBlock"}),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"A complete example for both options is available in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/actix/examples/tree/master/json/json"},"examples directory"),".")),(0,n.kt)("h2",{id:"content-encoding"},"Content Encoding"),(0,n.kt)("p",null,"Actix Web automatically ",(0,n.kt)("em",{parentName:"p"},"decompresses")," payloads. The following codecs are supported:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Brotli"),(0,n.kt)("li",{parentName:"ul"},"Gzip"),(0,n.kt)("li",{parentName:"ul"},"Deflate"),(0,n.kt)("li",{parentName:"ul"},"Zstd")),(0,n.kt)("p",null,"If request headers contain a ",(0,n.kt)("inlineCode",{parentName:"p"},"Content-Encoding")," header, the request payload is decompressed according to the header value. Multiple codecs are not supported, i.e: ",(0,n.kt)("inlineCode",{parentName:"p"},"Content-Encoding: br, gzip"),"."),(0,n.kt)("h2",{id:"chunked-transfer-encoding"},"Chunked transfer encoding"),(0,n.kt)("p",null,"Actix automatically decodes ",(0,n.kt)("em",{parentName:"p"},"chunked")," encoding. The ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/struct.Payload.html"},(0,n.kt)("inlineCode",{parentName:"a"},"web::Payload"))," extractor already contains the decoded byte stream. If the request payload is compressed with one of the supported compression codecs (br, gzip, deflate), then the byte stream is decompressed."),(0,n.kt)("h2",{id:"multipart-body"},"Multipart body"),(0,n.kt)("p",null,"Actix Web provides multipart stream support with an external crate, ",(0,n.kt)("a",{parentName:"p",href:"https://crates.io/crates/actix-multipart"},(0,n.kt)("inlineCode",{parentName:"a"},"actix-multipart")),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"A full example is available in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/actix/examples/tree/master/forms/multipart"},"examples directory"),".")),(0,n.kt)("h2",{id:"urlencoded-body"},"Urlencoded body"),(0,n.kt)("p",null,"Actix Web provides support for ",(0,n.kt)("em",{parentName:"p"},"application/x-www-form-urlencoded")," encoded bodies with the ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/struct.Form.html"},(0,n.kt)("inlineCode",{parentName:"a"},"web::Form"))," extractor which resolves to the deserialized instance. The type of the instance must implement the ",(0,n.kt)("inlineCode",{parentName:"p"},"Deserialize")," trait from ",(0,n.kt)("em",{parentName:"p"},"serde"),"."),(0,n.kt)("p",null,"The ",(0,n.kt)("em",{parentName:"p"},"UrlEncoded")," future can resolve into an error in several cases:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"content type is not ",(0,n.kt)("inlineCode",{parentName:"li"},"application/x-www-form-urlencoded")),(0,n.kt)("li",{parentName:"ul"},"transfer encoding is ",(0,n.kt)("inlineCode",{parentName:"li"},"chunked"),"."),(0,n.kt)("li",{parentName:"ul"},"content-length is greater than 256k"),(0,n.kt)("li",{parentName:"ul"},"payload terminates with error.")),(0,n.kt)(a.Z,{example:"requests",file:"urlencoded.rs",section:"urlencoded",mdxType:"CodeBlock"}),(0,n.kt)("h2",{id:"streaming-request"},"Streaming request"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"HttpRequest")," is a stream of ",(0,n.kt)("inlineCode",{parentName:"p"},"Bytes")," objects. It can be used to read the request body payload."),(0,n.kt)("p",null,"In the following example, we read and print the request payload chunk by chunk:"),(0,n.kt)(a.Z,{example:"requests",file:"streaming.rs",section:"streaming",mdxType:"CodeBlock"}))}u.isMDXComponent=!0}}]);