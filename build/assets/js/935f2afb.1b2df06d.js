"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"\u7b80\u4ecb","items":[{"type":"link","label":"\u6b22\u8fce\u4f7f\u7528","href":"/docs/","docId":"welcome"},{"type":"link","label":"Actix Web \u662f\u4ec0\u4e48","href":"/docs/whatis","docId":"whatis"}],"collapsed":true,"collapsible":true},{"type":"category","label":"\u57fa\u7840","items":[{"type":"link","label":"\u5f00\u59cb\u4f7f\u7528","href":"/docs/getting-started","docId":"getting-started"},{"type":"link","label":"\u5e94\u7528","href":"/docs/application","docId":"application"},{"type":"link","label":"Server","href":"/docs/server","docId":"server"},{"type":"link","label":"\u63d0\u53d6\u5668","href":"/docs/extractors","docId":"extractors"},{"type":"link","label":"\u5904\u7406\u5668","href":"/docs/handlers","docId":"handlers"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced","items":[{"type":"link","label":"Errors","href":"/docs/errors","docId":"errors"},{"type":"link","label":"URL Dispatch","href":"/docs/url-dispatch","docId":"url-dispatch"},{"type":"link","label":"Requests","href":"/docs/request","docId":"request"},{"type":"link","label":"Responses","href":"/docs/response","docId":"response"},{"type":"link","label":"Testing","href":"/docs/testing","docId":"testing"},{"type":"link","label":"Middleware","href":"/docs/middleware","docId":"middleware"},{"type":"link","label":"Static Files","href":"/docs/static-files","docId":"static-files"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Protocols","items":[{"type":"link","label":"Websockets","href":"/docs/websockets","docId":"websockets"},{"type":"link","label":"HTTP/2","href":"/docs/http2","docId":"http2"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Patterns","items":[{"type":"link","label":"Auto-Reloading","href":"/docs/autoreload","docId":"autoreload"},{"type":"link","label":"Databases","href":"/docs/databases","docId":"databases"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Diagrams","items":[{"type":"link","label":"HTTP Server Initialization","href":"/docs/http_server_init","docId":"http_server_init"},{"type":"link","label":"Connection Lifecycle","href":"/docs/conn_lifecycle","docId":"conn_lifecycle"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Actix","items":[{"type":"link","label":"Quick start","href":"/docs/actix","docId":"actix/sec-0-quick-start"},{"type":"link","label":"Getting Started","href":"/docs/actix/getting-started","docId":"actix/sec-1-getting-started"},{"type":"link","label":"Actor","href":"/docs/actix/actor","docId":"actix/sec-2-actor"},{"type":"link","label":"Address","href":"/docs/actix/address","docId":"actix/sec-3-address"},{"type":"link","label":"Context","href":"/docs/actix/context","docId":"actix/sec-4-context"},{"type":"link","label":"Arbiter","href":"/docs/actix/arbiter","docId":"actix/sec-5-arbiter"},{"type":"link","label":"SyncArbiter","href":"/docs/actix/sync-arbiter","docId":"actix/sec-6-sync-arbiter"}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Documentation","items":[{"type":"link","label":"actix","href":"https://docs.rs/actix/latest/actix/"},{"type":"link","label":"actix-web","href":"https://docs.rs/actix-web/latest/actix_web/"}],"collapsed":true,"collapsible":true}]},"docs":{"actix/sec-0-quick-start":{"id":"actix/sec-0-quick-start","title":"Quick start","description":"Before you can start writing an actix application, you\u2019ll need a version of Rust installed.","sidebar":"docs"},"actix/sec-1-getting-started":{"id":"actix/sec-1-getting-started","title":"Getting Started","description":"Let\u2019s create and run our first actix application. We\u2019ll create a new Cargo project","sidebar":"docs"},"actix/sec-10-registry":{"id":"actix/sec-10-registry","title":"sec-10-registry","description":"WIP"},"actix/sec-11-helper-actors":{"id":"actix/sec-11-helper-actors","title":"sec-11-helper-actors","description":"WIP"},"actix/sec-2-actor":{"id":"actix/sec-2-actor","title":"Actor","description":"Actix is a rust library providing a framework for developing concurrent applications.","sidebar":"docs"},"actix/sec-3-address":{"id":"actix/sec-3-address","title":"Address","description":"Actors communicate exclusively by exchanging messages. The sending actor can optionally","sidebar":"docs"},"actix/sec-4-context":{"id":"actix/sec-4-context","title":"Context","description":"Actors all maintain an internal execution context, or state. This","sidebar":"docs"},"actix/sec-5-arbiter":{"id":"actix/sec-5-arbiter","title":"Arbiter","description":"Arbiters provide an asynchronous execution context for Actors, functions and futures. Where an","sidebar":"docs"},"actix/sec-6-sync-arbiter":{"id":"actix/sec-6-sync-arbiter","title":"SyncArbiter","description":"When you normally run Actors, there are multiple Actors running on the","sidebar":"docs"},"actix/sec-7-stream":{"id":"actix/sec-7-stream","title":"sec-7-stream","description":"WIP"},"actix/sec-8-io-helpers":{"id":"actix/sec-8-io-helpers","title":"sec-8-io-helpers","description":"WIP"},"actix/sec-9-supervisor":{"id":"actix/sec-9-supervisor","title":"sec-9-supervisor","description":"WIP"},"application":{"id":"application","title":"\u5e94\u7528","description":"actix-web \u63d0\u4f9b\u4e86\u5404\u79cd\u539f\u8bed\u6765\u4f7f\u7528 Rust \u6784\u5efa Web \u670d\u52a1\u5668\u548c\u5e94\u7528\u3002\u5b83\u63d0\u4f9b\u8def\u7531\u3001\u4e2d\u95f4\u4ef6\u3001\u8bf7\u6c42\u9884\u5904\u7406\u3001\u54cd\u5e94\u540e\u5904\u7406\u7b49\u529f\u80fd\u3002","sidebar":"docs"},"autoreload":{"id":"autoreload","title":"Auto-Reloading","description":"During development it can be very handy to have cargo automatically recompile the code on changes. This can be accomplished very easily by using [cargo-watch].","sidebar":"docs"},"conn_lifecycle":{"id":"conn_lifecycle","title":"Connection Lifecycle","description":"After Server has started listening to all sockets, Accept and Worker are two main loops responsible for processing incoming client connections.","sidebar":"docs"},"databases":{"id":"databases","title":"Databases","description":"We have several example projects showing use of async database adapters:","sidebar":"docs"},"errors":{"id":"errors","title":"Errors","description":"Actix Web uses its own actixweb::ResponseError trait for error handling from web handlers.","sidebar":"docs"},"extractors":{"id":"extractors","title":"\u63d0\u53d6\u5668","description":"Actix Web \u63d0\u4f9b\u4e86\u4e00\u79cd\u7c7b\u578b\u5b89\u5168\u7684\u8bf7\u6c42\u4fe1\u606f\u8bbf\u95ee\u673a\u5236\uff0c\u79f0\u4e3a \u63d0\u53d6\u5668\uff08\u5373 impl FromRequest\uff09\u3002\u5185\u7f6e\u4e86\u8bb8\u591a\u63d0\u53d6\u5668\u5b9e\u73b0\uff08\u53c2\u89c1\u5b9e\u73b0\u8005\uff09\u3002","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"\u5f00\u59cb\u4f7f\u7528","description":"\u5b89\u88c5 Rust","sidebar":"docs"},"handlers":{"id":"handlers","title":"\u5904\u7406\u5668","description":"\u4e00\u4e2a\u8bf7\u6c42\u5904\u7406\u51fd\u6570\u662f\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u4ee5\u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u51fa\u6765\uff08\u5373 impl FromRequest\uff09\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8f6c\u6362\u4e3a HttpResponse \u7684\u7c7b\u578b\uff08\u5373 impl Responder\uff09\u3002","sidebar":"docs"},"http_server_init":{"id":"http_server_init","title":"HTTP Server Initialization","description":"Below is a diagram of HttpServer initialization, which happens on the following code","sidebar":"docs"},"http2":{"id":"http2","title":"HTTP/2","description":"actix-web automatically upgrades connections to HTTP/2 if possible.","sidebar":"docs"},"middleware":{"id":"middleware","title":"Middleware","description":"Actix Web\'s middleware system allows us to add additional behavior to request/response processing. Middleware can hook into an incoming request process, enabling us to modify requests as well as halt request processing to return a response early.","sidebar":"docs"},"request":{"id":"request","title":"Requests","description":"There are several options for json body deserialization.","sidebar":"docs"},"response":{"id":"response","title":"Responses","description":"A builder-like pattern is used to construct an instance of HttpResponse. HttpResponse provides several methods that return a HttpResponseBuilder instance, which implements various convenience methods for building responses.","sidebar":"docs"},"server":{"id":"server","title":"Server","description":"The HttpServer type is responsible for serving HTTP requests.","sidebar":"docs"},"static-files":{"id":"static-files","title":"Static Files","description":"It is possible to serve static files with a custom path pattern and NamedFile. To match a path tail, we can use a [.*] regex.","sidebar":"docs"},"testing":{"id":"testing","title":"Testing","description":"Every application should be well tested. Actix Web provides tools to perform unit and integration tests.","sidebar":"docs"},"url-dispatch":{"id":"url-dispatch","title":"URL Dispatch","description":"URL dispatch provides a simple way for mapping URLs to handler code using a simple pattern matching language. If one of the patterns matches the path information associated with a request, a particular handler object is invoked.","sidebar":"docs"},"websockets":{"id":"websockets","title":"Websockets","description":"Actix Web supports WebSockets with the actix-web-actors crate. It is possible to convert a request\'s Payload to a stream of ws::Payload and then use stream combinators to handle actual messages, but it is simpler to handle websocket communications with an http actor.","sidebar":"docs"},"welcome":{"id":"welcome","title":"\u6b22\u8fce\u4f7f\u7528","description":"Guiding you through building web apps with Actix","sidebar":"docs"},"whatis":{"id":"whatis","title":"Actix Web \u662f\u4ec0\u4e48","description":"Long ago, Actix Web was built on top of the actix actor framework. Now, Actix Web is largely unrelated to the actor framework and is built using a different system. Though actix is still maintained, its usefulness as a general tool is diminishing as the futures and async/await ecosystem matures. At this time, the use of actix is only required for WebSocket endpoints.","sidebar":"docs"}}}')}}]);