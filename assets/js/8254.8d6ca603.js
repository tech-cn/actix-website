"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[8254],{8254:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o='#![allow(dead_code)]\n\n// <config>\nuse actix_web::{web, App, HttpResponse, HttpServer};\n\n// this function could be located in a different module\nfn scoped_config(cfg: &mut web::ServiceConfig) {\n    cfg.service(\n        web::resource("/test")\n            .route(web::get().to(|| async { HttpResponse::Ok().body("test") }))\n            .route(web::head().to(HttpResponse::MethodNotAllowed)),\n    );\n}\n\n// this function could be located in a different module\nfn config(cfg: &mut web::ServiceConfig) {\n    cfg.service(\n        web::resource("/app")\n            .route(web::get().to(|| async { HttpResponse::Ok().body("app") }))\n            .route(web::head().to(HttpResponse::MethodNotAllowed)),\n    );\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .configure(config)\n            .service(web::scope("/api").configure(scoped_config))\n            .route(\n                "/",\n                web::get().to(|| async { HttpResponse::Ok().body("/") }),\n            )\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n// </config>\n'}}]);