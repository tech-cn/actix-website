"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[151],{151:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});const s='#![allow(dead_code)]\n\n// <ssl>\nuse actix_web::{get, App, HttpRequest, HttpServer, Responder};\nuse openssl::ssl::{SslAcceptor, SslFiletype, SslMethod};\n\n#[get("/")]\nasync fn index(_req: HttpRequest) -> impl Responder {\n    "Welcome!"\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    // load TLS keys\n    // to create a self-signed temporary cert for testing:\n    // `openssl req -x509 -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem -days 365 -subj \'/CN=localhost\'`\n    let mut builder = SslAcceptor::mozilla_intermediate(SslMethod::tls()).unwrap();\n    builder\n        .set_private_key_file("key.pem", SslFiletype::PEM)\n        .unwrap();\n    builder.set_certificate_chain_file("cert.pem").unwrap();\n\n    HttpServer::new(|| App::new().service(index))\n        .bind_openssl("127.0.0.1:8080", builder)?\n        .run()\n        .await\n}\n// </ssl>\n'}}]);