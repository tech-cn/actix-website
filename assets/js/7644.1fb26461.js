"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[7644],{7644:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r='use std::io;\n\nuse actix_web::{error, web, App, HttpResponse, HttpServer, Responder};\nuse diesel::{prelude::*, r2d2, Insertable, Queryable, SqliteConnection};\nuse serde::Serialize;\n\nmod schema {\n    diesel::table! {\n        users {\n            id -> VarChar,\n            name -> VarChar,\n        }\n    }\n}\n\n#[derive(Debug, Serialize, Queryable)]\nstruct User {\n    id: String,\n    name: String,\n}\n\n// <handler>\n#[derive(Debug, Insertable)]\n#[diesel(table_name = self::schema::users)]\nstruct NewUser<\'a> {\n    id: &\'a str,\n    name: &\'a str,\n}\n\nfn insert_new_user(\n    conn: &mut SqliteConnection,\n    user_name: String,\n) -> diesel::QueryResult<User> {\n    use crate::schema::users::dsl::*;\n\n    // Create insertion model\n    let uid = format!("{}", uuid::Uuid::new_v4());\n    let new_user = NewUser {\n        id: &uid,\n        name: &user_name,\n    };\n\n    // normal diesel operations\n    diesel::insert_into(users)\n        .values(&new_user)\n        .execute(conn)\n        .expect("Error inserting person");\n\n    let user = users\n        .filter(id.eq(&uid))\n        .first::<User>(conn)\n        .expect("Error loading person that was just inserted");\n\n    Ok(user)\n}\n// </handler>\n\n// <main>\ntype DbPool = r2d2::Pool<r2d2::ConnectionManager<SqliteConnection>>;\n\n#[actix_web::main]\nasync fn main() -> io::Result<()> {\n    // connect to SQLite DB\n    let manager = r2d2::ConnectionManager::<SqliteConnection>::new("app.db");\n    let pool = r2d2::Pool::builder()\n        .build(manager)\n        .expect("database URL should be valid path to SQLite DB file");\n\n    // start HTTP server on port 8080\n    HttpServer::new(move || {\n        App::new()\n            .app_data(web::Data::new(pool.clone()))\n            .route("/{name}", web::get().to(index))\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n// </main>\n\n// <index>\nasync fn index(\n    pool: web::Data<DbPool>,\n    name: web::Path<(String,)>,\n) -> actix_web::Result<impl Responder> {\n    let (name,) = name.into_inner();\n\n    let user = web::block(move || {\n        // Obtaining a connection from the pool is also a potentially blocking operation.\n        // So, it should be called within the `web::block` closure, as well.\n        let mut conn = pool.get().expect("couldn\'t get db connection from pool");\n\n        insert_new_user(&mut conn, name)\n    })\n    .await?\n    .map_err(error::ErrorInternalServerError)?;\n\n    Ok(HttpResponse::Ok().json(user))\n}\n// </index>\n'}}]);