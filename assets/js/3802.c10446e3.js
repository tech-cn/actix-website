"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[3802],{3802:(n,t,e)=>{e.r(t),e.d(t,{default:()=>a});const a='pub mod handlers_arc;\n// <data>\nuse actix_web::{web, App, HttpServer, Responder};\nuse std::cell::Cell;\n\n#[derive(Clone)]\nstruct AppState {\n    count: Cell<usize>,\n}\n\nasync fn show_count(data: web::Data<AppState>) -> impl Responder {\n    format!("count: {}", data.count.get())\n}\n\nasync fn add_one(data: web::Data<AppState>) -> impl Responder {\n    let count = data.count.get();\n    data.count.set(count + 1);\n\n    format!("count: {}", data.count.get())\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    let data = AppState {\n        count: Cell::new(0),\n    };\n\n    HttpServer::new(move || {\n        App::new()\n            .app_data(web::Data::new(data.clone()))\n            .route("/", web::to(show_count))\n            .route("/add", web::to(add_one))\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n// </data>\n'}}]);