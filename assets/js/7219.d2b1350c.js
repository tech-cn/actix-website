"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[7219],{7219:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});const s='// <streaming>\nuse actix_web::{get, web, Error, HttpResponse};\nuse futures::StreamExt;\n\n#[get("/")]\nasync fn index(mut body: web::Payload) -> Result<HttpResponse, Error> {\n    let mut bytes = web::BytesMut::new();\n    while let Some(item) = body.next().await {\n        let item = item?;\n        println!("Chunk: {:?}", &item);\n        bytes.extend_from_slice(&item);\n    }\n\n    Ok(HttpResponse::Ok().finish())\n}\n// </streaming>\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    use actix_web::{App, HttpServer};\n\n    HttpServer::new(|| App::new().service(index))\n        .bind(("127.0.0.1", 8080))?\n        .run()\n        .await\n}\n'}}]);