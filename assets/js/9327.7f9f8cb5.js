"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[9327],{9327:(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});const r='// <multipart>\n// use actix_web::{error, Error, HttpRequest, HttpResponse};\n// use futures::Future;\n\n// pub fn index(req: HttpRequest) -> Box<Future<Item = HttpResponse, Error = Error>> {\n//     // get multipart and iterate over multipart items\n//     req.multipart().and_then(|item| match item {\n//         multipart::MultipartItem::Field(field) => {\n//             println!(\n//                 "==== FIELD ==== {:?} {:?}",\n//                 field.headers(),\n//                 field.content_type()\n//             );\n//             Either::A(\n//                 field\n//                     .map(|chunk| {\n//                         println!("-- CHUNK: \\n{}", std::str::from_utf8(&chunk).unwrap());\n//                     })\n//                     .fold((), |_, _| result(Ok(()))),\n//             )\n//         }\n//         multipart::MultipartItem::Nested(mp) => Either::B(result(Ok(()))),\n//     })\n// }\n// </multipart>\n'}}]);