"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[8113],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},272:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={title:"Arbiter",slug:"/actix/arbiter"},o="Arbiter",s={unversionedId:"actix/sec-5-arbiter",id:"actix/sec-5-arbiter",title:"Arbiter",description:"Arbiters provide an asynchronous execution context for Actors, functions and futures. Where an",source:"@site/docs/actix/sec-5-arbiter.md",sourceDirName:"actix",slug:"/actix/arbiter",permalink:"/actix-website/docs/actix/arbiter",draft:!1,editUrl:"https://github.com/actix/actix-website/edit/master/docs/actix/sec-5-arbiter.md",tags:[],version:"current",frontMatter:{title:"Arbiter",slug:"/actix/arbiter"},sidebar:"docs",previous:{title:"Context",permalink:"/actix-website/docs/actix/context"},next:{title:"SyncArbiter",permalink:"/actix-website/docs/actix/sync-arbiter"}},l={},c=[{value:"System and Arbiter",id:"system-and-arbiter",level:2},{value:"The event loop",id:"the-event-loop",level:2},{value:"Using Arbiter for resolving async events",id:"using-arbiter-for-resolving-async-events",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arbiter"},"Arbiter"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter"),"s provide an asynchronous execution context for ",(0,i.kt)("inlineCode",{parentName:"p"},"Actor"),"s, ",(0,i.kt)("inlineCode",{parentName:"p"},"functions")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"futures"),". Where an\nactor contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"Context")," that defines its Actor specific execution state,\nArbiters host the environment where an actor runs."),(0,i.kt)("p",null,"As a result Arbiters perform a number of functions. Most notably, they are able\nto spawn a new OS thread, run an event loop, spawn tasks asynchronously on that\nevent loop, and act as helpers for asynchronous tasks."),(0,i.kt)("h2",{id:"system-and-arbiter"},"System and Arbiter"),(0,i.kt)("p",null,"In all our previous code examples the function ",(0,i.kt)("inlineCode",{parentName:"p"},"System::new")," creates an Arbiter\nfor your actors to run inside. When you call ",(0,i.kt)("inlineCode",{parentName:"p"},"start()")," on your actor it is then\nrunning inside of the System Arbiter's thread. In many cases, this is all you\nwill need for a program using Actix."),(0,i.kt)("p",null,"While it only uses one thread, it uses the very efficient event loop pattern\nwhich works well for asynchronous events. To handle synchronous, CPU-bound\ntasks, it's better to avoid blocking the event loop and instead offload the\ncomputation to other threads. For this usecase, read the next section and\nconsider using ",(0,i.kt)("a",{parentName:"p",href:"./sync-arbiter"},(0,i.kt)("inlineCode",{parentName:"a"},"SyncArbiter")),"."),(0,i.kt)("h2",{id:"the-event-loop"},"The event loop"),(0,i.kt)("p",null,"One ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter")," is in control of one thread with one event pool. When an Arbiter\nspawns a task (via ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter::spawn"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Context<Actor>::run_later"),", or similar\nconstructs), the Arbiter queues the task for execution on that task queue. When\nyou think ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter"),', you can think "single-threaded event loop".'),(0,i.kt)("p",null,"Actix in general does support concurrency, but normal ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter"),"s (not\n",(0,i.kt)("inlineCode",{parentName:"p"},"SyncArbiter"),"s) do not. To use Actix in a concurrent way, you can spin up\nmultiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter"),"s using ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter::new"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ArbiterBuilder"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter::start"),"."),(0,i.kt)("p",null,"When you create a new Arbiter, this creates a new execution context for Actors.\nThe new thread is available to add new Actors to it, but Actors cannot freely\nmove between Arbiters: they are tied to the Arbiter they were spawned in.\nHowever, Actors on different Arbiters can still communicate with each other\nusing the normal ",(0,i.kt)("inlineCode",{parentName:"p"},"Addr"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"Recipient")," methods. The method of passing messages is\nagnostic to whether the Actors are running on the same or different Arbiters."),(0,i.kt)("h2",{id:"using-arbiter-for-resolving-async-events"},"Using Arbiter for resolving async events"),(0,i.kt)("p",null,"If you aren't an expert in Rust Futures, Arbiter can be a helpful and simple\nwrapper to resolving async events in order. Consider we have two actors, A and\nB, and we want to run an event on B only once a result from A is completed. We\ncan use ",(0,i.kt)("inlineCode",{parentName:"p"},"Arbiter::spawn")," to assist with this task."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use actix::prelude::*;\n\nstruct SumActor {}\n\nimpl Actor for SumActor {\n    type Context = Context<Self>;\n}\n\n#[derive(Message)]\n#[rtype(result = "usize")]\nstruct Value(usize, usize);\n\nimpl Handler<Value> for SumActor {\n    type Result = usize;\n\n    fn handle(&mut self, msg: Value, _ctx: &mut Context<Self>) -> Self::Result {\n        msg.0 + msg.1\n    }\n}\n\nstruct DisplayActor {}\n\nimpl Actor for DisplayActor {\n    type Context = Context<Self>;\n}\n\n#[derive(Message)]\n#[rtype(result = "()")]\nstruct Display(usize);\n\nimpl Handler<Display> for DisplayActor {\n    type Result = ();\n\n    fn handle(&mut self, msg: Display, _ctx: &mut Context<Self>) -> Self::Result {\n        println!("Got {:?}", msg.0);\n    }\n}\n\nfn main() {\n    let system = System::new("single-arbiter-example");\n\n    // Define an execution flow using futures\n    let execution = async {\n        // `Actor::start` spawns the `Actor` on the *current* `Arbiter`, which\n        // in this case is the System arbiter\n        let sum_addr = SumActor {}.start();\n        let dis_addr = DisplayActor {}.start();\n\n        // Start by sending a `Value(6, 7)` to our `SumActor`.\n        // `Addr::send` responds with a `Request`, which implements `Future`.\n        // When awaited, it will resolve to a `Result<usize, MailboxError>`.\n        let sum_result = sum_addr.send(Value(6, 7)).await;\n\n        match sum_result {\n            Ok(res) => {\n                // `res` is now the `usize` returned from `SumActor` as a response to `Value(6, 7)`\n                // Once the future is complete, send the successful response (`usize`)\n                // to the `DisplayActor` wrapped in a `Display\n                dis_addr.send(Display(res)).await;\n            }\n            Err(e) => {\n                eprintln!("Encountered mailbox error: {:?}", e);\n            }\n        };\n    };\n\n    // Spawn the future onto the current Arbiter/event loop\n    Arbiter::spawn(execution);\n\n    // We only want to do one computation in this example, so we\n    // shut down the `System` which will stop any Arbiters within\n    // it (including the System Arbiter), which will in turn stop\n    // any Actor Contexts running within those Arbiters, finally\n    // shutting down all Actors.\n    System::current().stop();\n\n    system.run();\n}\n')))}p.isMDXComponent=!0}}]);