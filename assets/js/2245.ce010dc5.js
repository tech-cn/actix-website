"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[2245],{2245:(e,r,n)=>{n.r(r),n.d(r,{default:()=>t});const t='pub mod helpers;\npub mod logging;\npub mod override_error;\npub mod recommend_one;\npub mod recommend_two;\n\n// <response-error>\nuse actix_web::{error, Result};\nuse derive_more::{Display, Error};\n\n#[derive(Debug, Display, Error)]\n#[display(fmt = "my error: {}", name)]\nstruct MyError {\n    name: &\'static str,\n}\n\n// Use default implementation for `error_response()` method\nimpl error::ResponseError for MyError {}\n\nasync fn index() -> Result<&\'static str, MyError> {\n    Err(MyError { name: "test" })\n}\n// </response-error>\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    use actix_web::{web, App, HttpServer};\n\n    HttpServer::new(|| App::new().route("/", web::get().to(index)))\n        .bind(("127.0.0.1", 8080))?\n        .run()\n        .await\n}\n'}}]);