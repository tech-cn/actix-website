"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[1256],{1256:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});const s='// <websockets>\nuse actix::{Actor, StreamHandler};\nuse actix_web::{web, App, Error, HttpRequest, HttpResponse, HttpServer};\nuse actix_web_actors::ws;\n\n/// Define HTTP actor\nstruct MyWs;\n\nimpl Actor for MyWs {\n    type Context = ws::WebsocketContext<Self>;\n}\n\n/// Handler for ws::Message message\nimpl StreamHandler<Result<ws::Message, ws::ProtocolError>> for MyWs {\n    fn handle(&mut self, msg: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {\n        match msg {\n            Ok(ws::Message::Ping(msg)) => ctx.pong(&msg),\n            Ok(ws::Message::Text(text)) => ctx.text(text),\n            Ok(ws::Message::Binary(bin)) => ctx.binary(bin),\n            _ => (),\n        }\n    }\n}\n\nasync fn index(req: HttpRequest, stream: web::Payload) -> Result<HttpResponse, Error> {\n    let resp = ws::start(MyWs {}, &req, stream);\n    println!("{:?}", resp);\n    resp\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| App::new().route("/ws/", web::get().to(index)))\n        .bind(("127.0.0.1", 8080))?\n        .run()\n        .await\n}\n// </websockets>\n\n// testing requires specific headers:\n// Upgrade: websocket\n// Connection: Upgrade\n// Sec-WebSocket-Key: SOME_KEY\n// Sec-WebSocket-Version: 13\n'}}]);