"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[3829],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,m=p["".concat(s,".").concat(d)]||p[d]||y[d]||o;return r?n.createElement(m,c(c({ref:t},u),{},{components:r})):n.createElement(m,c({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},186:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={title:"SyncArbiter",slug:"/actix/sync-arbiter"},c="SyncArbiter",i={unversionedId:"actix/sec-6-sync-arbiter",id:"actix/sec-6-sync-arbiter",title:"SyncArbiter",description:"When you normally run Actors, there are multiple Actors running on the",source:"@site/docs/actix/sec-6-sync-arbiter.md",sourceDirName:"actix",slug:"/actix/sync-arbiter",permalink:"/docs/actix/sync-arbiter",draft:!1,editUrl:"https://github.com/actix/actix-website/edit/master/docs/actix/sec-6-sync-arbiter.md",tags:[],version:"current",frontMatter:{title:"SyncArbiter",slug:"/actix/sync-arbiter"},sidebar:"docs",previous:{title:"Arbiter",permalink:"/docs/actix/arbiter"}},s={},l=[{value:"Creating a Sync Actor",id:"creating-a-sync-actor",level:2},{value:"Starting the Sync Arbiter",id:"starting-the-sync-arbiter",level:2},{value:"Sync Actor Mailboxes",id:"sync-actor-mailboxes",level:2}],u={toc:l};function y(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"syncarbiter"},"SyncArbiter"),(0,a.kt)("p",null,"When you normally run Actors, there are multiple Actors running on the\nSystem's Arbiter thread, using its event loop. However for CPU bound workloads,\nor highly concurrent workloads, you may wish to have an Actor running multiple\ninstances in parallel."),(0,a.kt)("p",null,"This is what a SyncArbiter provides - the ability to launch multiple instances of\nan Actor on a pool of OS threads."),(0,a.kt)("p",null,"It's important to note a SyncArbiter can only host a single type of Actor. This means\nyou need to create a SyncArbiter for each type of Actor you want to run in this\nmanner."),(0,a.kt)("h2",{id:"creating-a-sync-actor"},"Creating a Sync Actor"),(0,a.kt)("p",null,"When implementing your Actor to be run on a SyncArbiter, it requires that your Actor's\nContext is changed from ",(0,a.kt)("inlineCode",{parentName:"p"},"Context")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncContext"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use actix::prelude::*;\n\nstruct MySyncActor;\n\nimpl Actor for MySyncActor {\n    type Context = SyncContext<Self>;\n}\n")),(0,a.kt)("h2",{id:"starting-the-sync-arbiter"},"Starting the Sync Arbiter"),(0,a.kt)("p",null,"Now that we have defined a Sync Actor, we can run it on a thread pool, created by\nour ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncArbiter"),". We can only control the number of threads at SyncArbiter creation\ntime - we can't add/remove threads later."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use actix::prelude::*;\n\nstruct MySyncActor;\n\nimpl Actor for MySyncActor {\n    type Context = SyncContext<Self>;\n}\n\nlet addr = SyncArbiter::start(2, || MySyncActor);\n")),(0,a.kt)("p",null,"We can communicate with the addr the same way as we have with our previous Actors\nthat we started. We can send messages, receive futures and results, and more."),(0,a.kt)("h2",{id:"sync-actor-mailboxes"},"Sync Actor Mailboxes"),(0,a.kt)("p",null,"Sync Actors have no Mailbox limits, but you should still use ",(0,a.kt)("inlineCode",{parentName:"p"},"do_send"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"try_send")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"send"),"\nas normal to account for other possible errors or sync vs async behavior."))}y.isMDXComponent=!0}}]);