"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[1366],{1366:(e,n,s)=>{s.r(n),s.d(n,{default:()=>o});const o='#![allow(dead_code)]\n\n// <user-session>\nuse actix_session::{Session, SessionMiddleware, storage::CookieSessionStore};\nuse actix_web::{web, App, Error, HttpResponse, HttpServer, cookie::Key};\n\nasync fn index(session: Session) -> Result<HttpResponse, Error> {\n    // access session data\n    if let Some(count) = session.get::<i32>("counter")? {\n        session.insert("counter", count + 1)?;\n    } else {\n        session.insert("counter", 1)?;\n    }\n\n    Ok(HttpResponse::Ok().body(format!(\n        "Count is {:?}!",\n        session.get::<i32>("counter")?.unwrap()\n    )))\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .wrap(\n                // create cookie based session middleware\n                SessionMiddleware::builder(CookieSessionStore::default(), Key::from(&[0; 64]))\n                    .cookie_secure(false)\n                    .build()\n            )\n            .service(web::resource("/").to(index))\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n// </user-session>\n'}}]);