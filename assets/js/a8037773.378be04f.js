"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[8519],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=s,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const a={title:"Address",slug:"/actix/address"},i="Address",o={unversionedId:"actix/sec-3-address",id:"actix/sec-3-address",title:"Address",description:"Actors communicate exclusively by exchanging messages. The sending actor can optionally",source:"@site/docs/actix/sec-3-address.md",sourceDirName:"actix",slug:"/actix/address",permalink:"/actix-website/docs/actix/address",draft:!1,editUrl:"https://github.com/actix/actix-website/edit/master/docs/actix/sec-3-address.md",tags:[],version:"current",frontMatter:{title:"Address",slug:"/actix/address"},sidebar:"docs",previous:{title:"Actor",permalink:"/actix-website/docs/actix/actor"},next:{title:"Context",permalink:"/actix-website/docs/actix/context"}},c={},l=[{value:"Message",id:"message",level:2},{value:"Recipient",id:"recipient",level:2}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"address"},"Address"),(0,s.kt)("p",null,"Actors communicate exclusively by exchanging messages. The sending actor can optionally\nwait for the response. Actors cannot be referenced directly, only by their addresses."),(0,s.kt)("p",null,"There are several ways to get the address of an actor. The ",(0,s.kt)("inlineCode",{parentName:"p"},"Actor")," trait provides\ntwo helper methods for starting an actor. Both return the address of the started actor."),(0,s.kt)("p",null,"Here is an example of ",(0,s.kt)("inlineCode",{parentName:"p"},"Actor::start()")," method usage. In this example ",(0,s.kt)("inlineCode",{parentName:"p"},"MyActor")," actor\nis asynchronous and is started in the same thread as the caller - threads are covered in\nthe ",(0,s.kt)("a",{parentName:"p",href:"./sync-arbiter"},"SyncArbiter")," chapter."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"struct MyActor;\nimpl Actor for MyActor {\n    type Context = Context<Self>;\n}\n\nlet addr = MyActor.start();\n")),(0,s.kt)("p",null,"An async actor can get its address from the ",(0,s.kt)("inlineCode",{parentName:"p"},"Context")," struct. The context needs to\nimplement the ",(0,s.kt)("inlineCode",{parentName:"p"},"AsyncContext")," trait. ",(0,s.kt)("inlineCode",{parentName:"p"},"AsyncContext::address()")," provides the actor's address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"struct MyActor;\n\nimpl Actor for MyActor {\n    type Context = Context<Self>;\n\n    fn started(&mut self, ctx: &mut Context<Self>) {\n       let addr = ctx.address();\n    }\n}\n")),(0,s.kt)("h2",{id:"message"},"Message"),(0,s.kt)("p",null,"To be able to handle a specific message the actor has to provide a\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/actix/latest/actix/trait.Handler.html"},(0,s.kt)("inlineCode",{parentName:"a"},"Handler<M>"))," implementation for this message.\nAll messages are statically typed. The message can be handled in an asynchronous\nfashion. The actor can spawn other actors or add futures or\nstreams to the execution context. The actor trait provides several methods that allow\ncontrolling the actor's lifecycle."),(0,s.kt)("p",null,"To send a message to an actor, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Addr")," object needs to be used. ",(0,s.kt)("inlineCode",{parentName:"p"},"Addr")," provides several\nways to send a message."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Addr::do_send(M)")," - this method ignores any errors in message sending. If the mailbox\nis full the message is still queued, bypassing the limit. If the actor's mailbox is closed,\nthe message is silently dropped. This method does not return the result, so if the\nmailbox is closed and a failure occurs, you won't have an indication of this.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Addr::try_send(M)")," - this method tries to send the message immediately. If\nthe mailbox is full or closed (actor is dead), this method returns a\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/actix/latest/actix/prelude/enum.SendError.html"},(0,s.kt)("inlineCode",{parentName:"a"},"SendError")),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Addr::send(M)")," - This message returns a future object that resolves to a result\nof a message handling process. If the returned ",(0,s.kt)("inlineCode",{parentName:"p"},"Future")," object is dropped, the\nmessage is cancelled."))),(0,s.kt)("h2",{id:"recipient"},"Recipient"),(0,s.kt)("p",null,"Recipient is a specialized version of an address that supports only one type of message.\nIt can be used in case the message needs to be sent to a different type of actor.\nA recipient object can be created from an address with ",(0,s.kt)("inlineCode",{parentName:"p"},"Addr::recipient()"),"."),(0,s.kt)("p",null,"Address objects require an actor type, but if we just want to send a specific message\nto an actor that can handle the message, we can use the Recipient interface."),(0,s.kt)("p",null,"For example recipient can be used for a subscription system. In the following example\n",(0,s.kt)("inlineCode",{parentName:"p"},"OrderEvents")," actor sends a ",(0,s.kt)("inlineCode",{parentName:"p"},"OrderShipped")," message to all subscribers. A subscriber can\nbe any actor that implements the ",(0,s.kt)("inlineCode",{parentName:"p"},"Handler<OrderShipped>")," trait."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'use actix::prelude::*;\n\n#[derive(Message)]\n#[rtype(result = "()")]\nstruct OrderShipped(usize);\n\n#[derive(Message)]\n#[rtype(result = "()")]\nstruct Ship(usize);\n\n/// Subscribe to order shipped event.\n#[derive(Message)]\n#[rtype(result = "()")]\nstruct Subscribe(pub Recipient<OrderShipped>);\n\n/// Actor that provides order shipped event subscriptions\nstruct OrderEvents {\n    subscribers: Vec<Recipient<OrderShipped>>,\n}\n\nimpl OrderEvents {\n    fn new() -> Self {\n        OrderEvents {\n            subscribers: vec![]\n        }\n    }\n}\n\nimpl Actor for OrderEvents {\n    type Context = Context<Self>;\n}\n\nimpl OrderEvents {\n    /// Send event to all subscribers\n    fn notify(&mut self, order_id: usize) {\n        for subscr in &self.subscribers {\n           subscr.do_send(OrderShipped(order_id));\n        }\n    }\n}\n\n/// Subscribe to shipment event\nimpl Handler<Subscribe> for OrderEvents {\n    type Result = ();\n\n    fn handle(&mut self, msg: Subscribe, _: &mut Self::Context) {\n        self.subscribers.push(msg.0);\n    }\n}\n\n/// Subscribe to ship message\nimpl Handler<Ship> for OrderEvents {\n    type Result = ();\n    fn handle(&mut self, msg: Ship, ctx: &mut Self::Context) -> Self::Result {\n        self.notify(msg.0);\n        System::current().stop();\n    }\n}\n\n/// Email Subscriber \nstruct EmailSubscriber;\nimpl Actor for EmailSubscriber {\n    type Context = Context<Self>;\n}\n\nimpl Handler<OrderShipped> for EmailSubscriber {\n    type Result = ();\n    fn handle(&mut self, msg: OrderShipped, _ctx: &mut Self::Context) -> Self::Result {\n        println!("Email sent for order {}", msg.0)\n    }\n    \n}\nstruct SmsSubscriber;\nimpl Actor for SmsSubscriber {\n    type Context = Context<Self>;\n}\n\nimpl Handler<OrderShipped> for SmsSubscriber {\n    type Result = ();\n    fn handle(&mut self, msg: OrderShipped, _ctx: &mut Self::Context) -> Self::Result {\n        println!("SMS sent for order {}", msg.0)\n    }\n    \n}\n\nfn main() {\n    let system = System::new("events");\n    let email_subscriber = Subscribe(EmailSubscriber{}.start().recipient());\n    let sms_subscriber = Subscribe(SmsSubscriber{}.start().recipient());\n    let order_event = OrderEvents::new().start();\n    order_event.do_send(email_subscriber);\n    order_event.do_send(sms_subscriber);\n    order_event.do_send(Ship(1));\n    system.run();\n}\n')))}p.isMDXComponent=!0}}]);