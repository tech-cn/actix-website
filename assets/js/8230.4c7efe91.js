"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[8230],{8230:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r='use actix_web::{web, App, HttpResponse, HttpServer, Responder};\nuse serde::Deserialize;\nuse actix_web::web::{Either, Json, Form};\n\n// <easy-form-handling>\n#[derive(Deserialize)]\nstruct Register {\n    username: String,\n    country: String,\n}\n\n// register form is JSON\nasync fn json_register(form: web::Json<Register>) -> impl Responder {\n    format!("Hello {} from {}!", form.username, form.country)\n}\n\n// register form can be either JSON or URL-encoded\nasync fn register(form: Either<Json<Register>, Form<Register>>) -> impl Responder {\n    let Register { username, country } = form.into_inner();\n    format!("Hello {username} from {country}!")\n}\n// </easy-form-handling>\n\nasync fn index() -> HttpResponse {\n    HttpResponse::Ok()\n        .content_type("text/html; charset=utf-8")\n        .body(include_str!("../static/form.html"))\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route("/", web::get().to(index))\n            .route("/register", web::post().to(register))\n            .route("/json_register", web::post().to(json_register))\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n'}}]);