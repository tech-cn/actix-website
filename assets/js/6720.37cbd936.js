"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[6720],{6720:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});const s='use actix_web::{web, HttpResponse, Responder};\nuse serde::{Deserialize, Serialize};\n\n#[derive(Deserialize, Serialize, Debug)]\nstruct AppState {\n    count: i32,\n}\n\n#[allow(dead_code)]\nasync fn index(data: web::Data<AppState>) -> impl Responder {\n    HttpResponse::Ok().json(data.get_ref())\n}\n\n// <integration-two>\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use actix_web::{test, web, App};\n\n    #[actix_web::test]\n    async fn test_index_get() {\n        let app = test::init_service(\n            App::new()\n                .app_data(web::Data::new(AppState { count: 4 }))\n                .route("/", web::get().to(index)),\n        )\n        .await;\n        let req = test::TestRequest::get().uri("/").to_request();\n        let resp: AppState = test::call_and_read_body_json(&app, req).await;\n\n        assert_eq!(resp.count, 4);\n    }\n}\n// </integration-two>\n'}}]);