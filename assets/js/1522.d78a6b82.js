"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[1522],{1522:(n,e,r)=>{r.r(e),r.d(e,{default:()=>o});const o='#![allow(dead_code)]\n\n// <json-two>\nuse actix_web::{error, web, App, HttpResponse, HttpServer, Responder};\nuse serde::Deserialize;\n\n#[derive(Deserialize)]\nstruct Info {\n    username: String,\n}\n\n/// deserialize `Info` from request\'s body, max payload size is 4kb\nasync fn index(info: web::Json<Info>) -> impl Responder {\n    format!("Welcome {}!", info.username)\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        let json_config = web::JsonConfig::default()\n            .limit(4096)\n            .error_handler(|err, _req| {\n                // create custom error response\n                error::InternalError::from_response(err, HttpResponse::Conflict().finish())\n                    .into()\n            });\n\n        App::new().service(\n            web::resource("/")\n                // change json extractor configuration\n                .app_data(json_config)\n                .route(web::post().to(index)),\n        )\n    })\n    .bind(("127.0.0.1", 8080))?\n    .run()\n    .await\n}\n// </json-two>\n'}}]);